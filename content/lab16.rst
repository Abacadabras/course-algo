БИЛЕТЫ К ОСЕННЕМУ ЗАЧЁТУ
########################

:date: 2018-12-14 9:00
:summary: Список вопросов. Расписание сдач. Процедура приёма зачёта.
:status: published

.. default-role:: code
.. contents:: Содержание

Расписание
----------------

Зачёт проходит по расписанию лабораторных работ и в тех же аудиториях. 
Можно прийти с чужой группой, но очерёдность и даже возможность сдачи в этом случае не гарантируется. 


Процедура приёма зачёта
-----------------------

Оценка по информатике ставится в результате устного ответа на дифференцированном зачёте. Присутствие на зачёте для постановки оценки обязательно!

Сдача происходит по билетам. В билете содержится два вопроса из основного списка. На подготовку студенту отводится не более 20 минут. Преподаватель слушает ответы на вопросы в билете, а также может задать от одного до трёх дополнительных вопросов, как из основного списка, так и любых других по программе курса.

Использование на зачёте любых цифровых и бумажных носителей информации студентом недопустимо! Допустимы только ручка и бумага.


Список вопросов
---------------

#. Единицы информации. Байт. Двоичные приставки в системе СИ.
#. Позиционные системы счисления. Связь 2-й, 4-й, 8-й и 16-й систем счисления.
#. Равномерное и неравномерное двоичное кодирование. Префиксный код и условие Фано.
#. Представление знаковых целых чисел в памяти ПК (дополнительный код).
#. Оператор if. Пример вложенных и каскадных условных конструкций. Тернарный оператор.
#. Цикл while, операторы break, continue. Суммирование потока целых чисел с терминальным числом 0.
#. Цикл for, операторы break, continue. Подсчёт количества чётных чисел из ста данных на std::cin.
#. Тест простоты числа с использованием переменной-флага или с return.
#. Разложение числа на множители.
#. Индуктивные функции (однопроходные алгоритмы обработки последовательности).
#. Проверка последовательности чисел на соответствие всех элементов заданному свойству.
#. Поиск максимума и подсчёт количества элементов, равных максимальному.
#. Нахождение трёх максимальных элементов в последовательности за один проход.
#. Поиск местоположения максимума в последовательности за один проход.
#. Одномерные массивы в С++. Циклический сдвиг в массиве.
#. Одномерные массивы в С++. Реверс в массиве.
#. Адреса и указатели. Разыменование * и взятие адреса &. Адресная арифметика в С++.
#. Преобразование типа указателя и реинтерпретация данных. Тип void*.
#. Выделение и освобождение динамической памяти.
#. Статические двумерные массивы в С++. Динамические двумерные массивы в С++.
#. Модульная парадигма в С++. Раздельная компиляция. Этапы компиляции.
#. Пользовательские типы struct. Односвязный и двусвязный списки. Перебор звеньев с распечаткой значений.
#. Бинарный поиск в упорядоченном массиве.
#. Сортировки: методом пузырька, дурака, обезьяны (без реализации), вставками, выбором.
#. Рекурсия. Прямой и обратный ход рекурсии. Стек вызовов при рекурсии. Вычисление факториала.
#. Алгоритм Евклида. Реализация через цикл и через рекурсию.
#. Быстрое возведение в степень.
#. Решение задачи о Ханойских башнях.
#. Рекурсивная генерация комбинаторных объектов: двоичных последовательностей, перестановок, подмножеств.
#. Быстрая сортировка Тони Хоара и сортировка слиянием Джона фон Неймана. Сходство и различие, асимптотика.
#. Динамическое программирование сверху и снизу. Вычисление чисел Фибоначчи.
#. Динамическое программирование. Задача о количестве траекторий Кузнечика на числовой прямой.
#. Динамическое программирование. Задача о траектории наименьшей стоимости для Кузнечика.
#. Динамическое программирование. Задача о укладке рюкзака (дискретная).
#. Динамическое программирование. Наибольшая общая подпоследовательность.
#. Динамическое программирование. Вычисление расстояния Левенштейна.

Оценка на зачёте
----------------

Основанием для рейтинговой оценки служат три оценки:

#. Контрольная №1
#. Контрольная №2
#. Средняя оценка за все контесты

Преподаватель, экзаменующий студента, видит все эти оценки по отдельности, а также рекомендуемую итоговую оценку, которая вычисляется по этим пяти оценкам автоматически. Исходя из ответа студента итоговая оценка в зачётку может быть отклонена от рекомендуемой на ±2 балла (по 10-балльной шкале). Если преподаватель хочет повысить или понизить оценку на большее число баллов, он советуется с лектором, присутствующим на зачёте.

Студент при несогласии с итоговой оценкой может потребовать апелляции у старшего преподавателя, но за это придётся рискнуть 1 баллом. Если апелляция не будет успешной, и старший преподаватель полностью согласится с преподавателем-экзаменатором в его оценке знаний студента, то итоговая оценка будет *понижена* на 1 балл (по 10-балльной шкале).


Почему дифференцированный зачёт сдаётся устно
---------------------------------------------

#. Во-первых, это возможность проверить знание студентом тем, вошедших в курс лекций, но не вошедших прямо в лабораторные работы.
#. Во-вторых, устный ответ расширяет у студента актив понятийного аппарата информатики, развивает умение связно излагать свои мысли на языке предмета.
#. В-третьих, устный ответ даёт возможность преподавателю осознать уровень самостоятельности студента при написании им лабораторных работ.
#. В-четвёртых, устный ответ позволяет студенту, продемонстрировавшему свои знания на зачёте, повысить оценку, которая получается исходя из рейтинга за работы в семестре.
#. И в пятых, повторение материала лекций в конце семестра приводит к лучшему запоминанию материала и откладыванию его в долгую память.

Успехов в подготовке к зачёту!