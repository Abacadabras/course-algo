Множества и словари в Python
##################################

:date: 2020-02-18 09:00
:summary: Множества, словари и задачи
:status: draft

.. default-role:: code
.. contents:: Содержание

Множества Python
==================
Множество (`set`) - встроенная структура данных языка Python, имеющая следующие свойства:

- множество это коллекция
    множество содержит элементы
- множество неупорядоченно
    Множество не записывает (не хранит) *позиции* или *порядок добавления* его элементов.
    Таким образом, множество не имеет свойств последовательности (например, массива): у элементов множества нет индексов, невозможно взять срез множества...
- элементы множества уникальны
    Множество не может содержать два одинаковых элемента.
- элементы множества - хешируемые объекты (``hashable objects``)
    В Python множество `set` реализовано с использованием хеш-таблицы.
    Это приводит к тому, что элементы множества должны быть неизменяемыми объектами.
    Например, элементом множества может быть строка, число, кортеж `tuple`, но не может быть список `list`, другое множество `set`...

Эти свойства множеств часто используются, чтобы проверять вхождение элементов, удаление дубликатов из последовательностей, а также для математических операций пересечения, объединения, разности...

Создание и изменение множества
------------------------------------
Запустите в терминале Python в интерпретируемом режиме и проработайте примеры ниже.

Пустое множество создаётся с помощью функции `set`

.. code-block:: pycon
    
    >>> A = set()
    >>> type(A)
    <class 'set'>
    >>> len(A)
    0
    >>> A
    set()

Обратите внимание, что размер множества множества можно получить с помощью функции `len`.

Добавим несколько элементов

.. code-block:: pycon

    >>> A.add(1)
    >>> A
    {1}
    >>> A.add(2)
    >>> A
    {1, 2}
    >>> A.add(2)
    >>> A
    {1, 2}

Заметьте, что повторное добавление не имеет никакого эффекта на множество.

Также, из вывода видно, что литералом множества являются фигурные скобки ``{}``, в которых через запятую указаны элементы.
Так, ещё один способ создать **непустое** множество - воспользоваться литералом

.. code-block:: pycon

    >>> B = {1, 2}
    >>> B
    {1, 2}

При попытке добавления изменяемого объекта возникнет ошибка

.. code-block:: pycon

    >>> B.add([3,4,5])
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: unhashable type: 'list'

Здесь произошла попытка добавить массив в множество ``B``.

У операции добавления `set.add` существует обратная - операция удаления `set.remove`

.. code-block:: pycon

    >>> B
    {1, 2}
    >>> B.remove(1)
    >>> B
    {2}
    >>> B.remove(3)
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    KeyError: 3

При попытке удаления элемента, не входящего в множество, возникает ошибка `KeyError`.

Чтобы проверить вхождение элемента в множество использовать оператор `in`

.. code-block:: pycon

    >>> B = {1,2}
    >>> B
    {1, 2}
    >>> 3 in B
    False

Кроме того, существует метод `set.discard`, который удаляет элемент из множества, только в том случае, если этот элемент присутствовал в нём.

Математические операции
------------------------
Множества Python поддерживают привычные математические операции

Проверки
^^^^^^^^^
Одинаковые множества

.. code-block:: pycon

    >>> A = {1, 2, 3}
    >>> B = {1, 2, 3}
    >>> A == B
    True
    >>> B.add(4)
    >>> A
    {1, 2, 3}
    >>> B
    {1, 2, 3, 4}
    >>> A == B
    False

Проверка на нестрогое подмножество `set.issubset`

.. code-block:: pycon

    >>> A
    {1, 2, 3}
    >>> B
    {1, 2, 3, 4}
    >>> A.issubset(B)
    True
    >>> B.issubset(A)
    False
    >>> A.issubset(A)
    True

Проверка на нестрогое надмножество `set.issuperset`

.. code-block:: pycon

    >>> A
    {1, 2, 3}
    >>> B
    {1, 2, 3, 4}
    >>> A.issuperset(B)
    False
    >>> B.issuperset(A)
    True
    >>> B.issuperset(B)
    True

Операции получения новых множеств

.. code-block:: pycon

    >>> A = {1, 2, 4}
    >>> B = {1, 2, 3}
    >>> A.union(B)  # union - объединение множеств
    {1, 2, 3, 4}
    >>> A.intersection(B)  # intersection - пересечение
    {1, 2}
    >>> A.difference(B)  # difference - разность множеств
    {4}
    >>> B.difference(A)
    {3}
    >>> A.symmetric_difference(B)  # symmetric_difference - симметрическая разность
    {3, 4}
    >>> B.symmetric_difference(A)
    {3, 4}


Сводная таблица по множествам (``cheatsheet``)
------------------------------------------------
+----------------------------------+--------------------------------------+----------------+
| Операция                         | Синтаксис                            | Тип результата |
+==================================+======================================+================+
| Вхождение элемента               | ``elem in A``                        | ``bool``       |
+----------------------------------+--------------------------------------+----------------+
| Равенство                        | ``A == B``                           | ``bool``       |
+----------------------------------+--------------------------------------+----------------+
| Является нестрогим подмножеством | ``A.issubset(B) или A <= B``         | ``bool``       |
+----------------------------------+--------------------------------------+----------------+
| Является строгим подмножеством   | ``A < B``                            | ``bool``       |
+----------------------------------+--------------------------------------+----------------+
| Является нестрогим надмножеством | ``A.issuperset(B) или A >= B``       | ``bool``       |
+----------------------------------+--------------------------------------+----------------+
| Явяляется строгим надмножеством  | ``A > B``                            | ``bool``       |
+----------------------------------+--------------------------------------+----------------+
| Объединение множеств             | ``A.union(B, C...)``                 | ``set``        |
|                                  +--------------------------------------+----------------+
|                                  | ``A | B | C | ...``                  | ``set``        |
+----------------------------------+--------------------------------------+----------------+
| Пересечение множеств             | ``A.intersection(B, C,...)``         | ``set``        |
|                                  +--------------------------------------+----------------+
|                                  | ``A & B & C & ...``                  | ``set``        |
+----------------------------------+--------------------------------------+----------------+
| Разность множеств                | ``A.difference(B, C,...)``           | ``set``        |
|                                  +--------------------------------------+----------------+
|                                  | ``A - B - C - ...``                  | ``set``        |
+----------------------------------+--------------------------------------+----------------+
| Симметрическая разность множеств | ``A.symmetric_difference(B, C,...)`` | ``set``        |
|                                  +--------------------------------------+----------------+
|                                  | ``A ^ B ^ C ^ ...``                  | ``set``        |
+----------------------------------+--------------------------------------+----------------+

Кроме того, у операций, порождающих новые множества, существует ``inplace`` варианты.
Для методов это те же названия, только с префиксом ``_update``, а для соответствующих операторов добавляется знак равенства ``=``.
Ниже показан вариант для операции разности множеств

.. code-block:: pycon

    >>> A = {1, 2, 3}
    >>> A = {1, 2, 3, 4}
    >>> B = {2, 4}
    >>> A.difference_update(B)
    >>> A
    {1, 3}
    >>> A = {1, 2, 3, 4}
    >>> B = {2, 4}
    >>> A -= B
    >>> A
    {1, 3}

Неизменяемые множества
------------------------


Словари Python
==================


Задачи
==================
